//optimal 
//tc=o(n)+o(2n)
//sc=o(n)
//102,101,103,4,8,104
int longestConsecutive(vector<int>& nums) 
    {
        unordered_set<int>set;
        int n=nums.size();
        int cnt=0;
        int longest=0;
        if(n==0) return 0;
        for(int i=0;i<n;i++)
        {
            set.insert(nums[i]);
        }
        for(auto it:set)//
        {
            if(set.find(it-1)==set.end())
            {
            
                while(set.find(it)!=set.end())
                {
                    cnt++;
                    it+=1;

                }
            }
            longest=max(longest,cnt);
            cnt=0;

        }
        return longest;
    }

//TC=o(n)+nlogn
//sc=o(n)

int longestConsecutive(vector<int>& nums) 
    {
        map<int,int>mpp;
        for(int i=0;i<nums.size();i++)
        {
            mpp[nums[i]]++;
        }
       int c=0;
       int num=0;
       int ans=1;
       int res=0;
       if(nums.size()==0) return 0;
        for(auto it:mpp)
        {
            if(c==0)
            {
                num=it.first;
                c=c+1;
            }
             
            if(mpp.find(num+1)!=mpp.end())
            {  
                ans++;
                num=num+1;
            }
            else
            {
                res=max(res,ans);
                ans=1;
                num=it.first;    
            }   
        }
        res=max(res,ans);
        return res;
    }
// TC=O(N)+o(nlogn)
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        if(n==1) return 1;
        sort(nums.begin(),nums.end());
        int ans=INT_MIN;
        int i=0;
        int c=0;
        int d=0;
        int maxi=0;
        while(i<n)
        {
            if(ans==INT_MIN || nums[i]==ans+1)
            {
                c++;
                ans=nums[i];
                i++;
            }
            else if(nums[i]==ans)
            {
                c++;
                d++;
                i++;
            }
            else
            {
                maxi=max(maxi,c-d);
                c=0;
                d=0;
                ans=INT_MIN;
            }
            maxi=max(maxi,c-d);
        }
        return maxi;
    }
};
